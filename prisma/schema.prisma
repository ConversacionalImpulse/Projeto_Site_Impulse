generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id                Int       @id @default(autoincrement())
  nome              String
  rg                String?   @unique
  cpf               String    @unique
  dataNascimento    DateTime
  email             String    @unique
  telefoneWapp      String
  salario           String?
  codBanco          String?
  agenciaBanco      String?
  contaBanco        String?
  pixBanco          String?
  dataContratacao   DateTime
  modeloContratacao String
  departamento      String
  cargo             String
  estagio           String?
  escolaVinculo     String?
  horasAlocadas     Int
  dataDemissao      DateTime?
  //turnOver          String?
  //centroDeCusto     String?
  //sindicato         String?
  status            String
  rua               String
  numero            String
  complemento       String?
  bairro            String
  cidade            String
  estado            String
  cep               String
  formulario1       Form1[]
  formulario2       Form2[]

  @@map("funcionarios")
}

model Client {
  id                  Int           @id @default(autoincrement())
  nome                String
  cnpj                String        @unique
  razaoSocial         String
  endereco            String?
  numero              String?
  complemento         String?
  bairro              String?
  cidade              String?
  estado              String? //novo
  cep                 String? //novo
  emailResponsavel    String
  nomeResponsavel     String
  telefoneResponsavel String?
  situacao            String
  acquisition         Acquisition[]

  @@map("clientes")
}

model Acquisition {
  id             Int       @id @default(autoincrement())
  pastaCliente   String?
  nomeServico    String?
  dataAdquirido  DateTime?
  dataPrevista   DateTime?
  dataFinalizada DateTime?
  situacao       String?
  valorMensal    String?
  descricao      String?
  fk_clientId    Int
  client         Client    @relation(fields: [fk_clientId], references: [id])

  @@map("aquisicoes")
}

model Product {
  id        Int    @id @default(autoincrement())
  nome      String
  segmento  String
  descricao String

  @@map("produtos")
}

model User {
  id               Int                @id @default(autoincrement())
  nome             String
  email            String             @unique
  senha            String
  created_at       DateTime           @default(now())
  UsersRoles       UsersRoles[]
  UsersPermissions UsersPermissions[]

  @@map("usuarios")
}

model Roles {
  id               Int                @id @default(autoincrement())
  nome             String
  descricao        String
  created_at       DateTime           @default(now())
  UsersRoles       UsersRoles[]
  RolesPermissions RolesPermissions[]

  @@map("funcoes")
}

model Permissions {
  id               Int                @id @default(autoincrement())
  nome             String
  descricao        String
  created_at       DateTime           @default(now())
  UsersPermissions UsersPermissions[]
  RolesPermissions RolesPermissions[]

  @@map("permissoes")
}

model UsersRoles {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [fk_UserId], references: [id])
  role       Roles    @relation(fields: [fk_RoleId], references: [id])
  fk_UserId  Int
  fk_RoleId  Int
  created_at DateTime @default(now())
}

model UsersPermissions {
  id              Int         @id @default(autoincrement())
  user            User        @relation(fields: [fk_UserId], references: [id])
  permission      Permissions @relation(fields: [fk_PermissionId], references: [id])
  fk_UserId       Int
  fk_PermissionId Int
  created_at      DateTime    @default(now())
}

model RolesPermissions {
  id              Int         @id @default(autoincrement())
  role            Roles       @relation(fields: [fk_RoleId], references: [id])
  permission      Permissions @relation(fields: [fk_PermissionId], references: [id])
  fk_RoleId       Int
  fk_PermissionId Int
  created_at      DateTime    @default(now())
}

model Form1 {
  id         Int      @id @default(autoincrement())
  email      String
  question1  String?
  question2  String?
  question3  String?
  question4  String?
  question5  String?
  question6  String?
  question7  String?
  question8  String?
  question9  String?
  created_at DateTime @default(now())

  fk_employeeId Int
  Employee      Employee @relation(fields: [fk_employeeId], references: [id])
  // onDelete: Cascade -> Deletar em cascata o DB

  @@map("formulario1")
}

model Form2 {
  id            Int      @id @default(autoincrement())
  email         String
  question1     String?
  question2     String?
  question3     String?
  question4     String?
  question5     String?
  question6     String?
  question7     String?
  question8     String?
  question9     String?
  question10    String?
  created_at    DateTime @default(now())
  fk_employeeId Int

  Employee Employee @relation(fields: [fk_employeeId], references: [id])

  @@map("formulario2")
}

model Acess {
  id           Int    @id @default(autoincrement())
  titulo       String
  url          String
  login        String
  senha        String
  departamento String

  @@map("acessos")
}

model TrabalheConosco {
  id              Int           @id @default(autoincrement())
  primeiroNome    String
  sobreNome       String
  email           String
  vagaEscolhida   String
  nivelAtual      String
  disponibilidade String
  mensagem        String?
  anexo           String?
  createdAt       DateTime      @default(now())
  updateAt        DateTime      @default(now())
  observacoes     Observacoes[]
}

model Observacoes {
  id                        Int             @id @default(autoincrement())
  observacao                String?
  id_candidato              Int
  candidato_trabalheConosco TrabalheConosco @relation(fields: [id_candidato], references: [id])
}
